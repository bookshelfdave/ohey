
grammar O
  rule query
    (
      select
         (field_list | star)
      from
         field_list
      where_clause?
     ) {
      def value
        return "x"
      end
       }
  end

  rule where_clause
    (where predicate+) <WhereClauseNode>
  end

  rule predicate
    ref (equals | notequals | (">" | ">=" | "<" | "<=" | "in") space) ref
  end

  rule field
    reserved_field | id
  end

  rule ref
    (reserved_field | bool | id | number | string) space
  end

  rule number
    ([1-9] [0-9]* | '0')
  end

  rule field_list
    field (comma field)*
  end

  rule reserved_field
    "$" id
  end

  rule id
    [a-zA-Z] [a-zA-Z0-9\._]* space
  end

  rule plus
    '+' space
  end

  rule comma
    ',' space
  end

  rule notequals
    '!=' space
  end

  rule equals
    '=' space
  end

  rule bool
    ("true" | "false") space
  end

  rule string
    '"' ( '\"' | !'"' . )* '"'
  end


  #rule number
  #  float | integer
  #end

  #rule float
  #  (digits '.' digits space*)
  #end

  #rule integer
  #  (digits space*)
  #end

  #rule digits
  #  [0-9]+ ('_' [0-9]+)*
  #end

  rule select
    "select" space
  end

  rule where
    "where" space
  end

  rule from
    "from" space
  end

  rule star
    "*" space
  end

  rule space
    [ \t\r\n]*
  end

end

